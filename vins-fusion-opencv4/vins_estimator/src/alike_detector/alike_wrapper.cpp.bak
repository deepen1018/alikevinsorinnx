#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <cstddef>
#include <stdexcept>
#include <iostream>
#include <Python.h>
#include <numpy/arrayobject.h>
#include "alike_wrapper.h"
#include <ros/ros.h>

class AlikeDetector::Impl {
public:
    static bool python_initialized;
    PyThreadState *_save;
    PyObject* alike_detector;

    Impl() : alike_detector(nullptr) {
        try {
            ROS_INFO("Initializing ALIKE detector implementation");
            if (!python_initialized) {
                ROS_INFO("Initializing Python interpreter");
                Py_Initialize();
                if (!Py_IsInitialized()) {
                    throw std::runtime_error("Failed to initialize Python interpreter");
                }
                PyEval_InitThreads();
                python_initialized = true;
            }
            ROS_INFO("Initializing NumPy arrays");
            _import_array();
            _save = PyEval_SaveThread();
            ROS_INFO("Implementation initialized successfully");
        }
        catch (const std::exception& e) {
            ROS_ERROR("Implementation initialization failed: %s", e.what());
            throw;
        }
    }
    
    ~Impl() {
        PyEval_RestoreThread(_save);
        if (alike_detector) {
            Py_DECREF(alike_detector);
            alike_detector = nullptr;
        }
        if (python_initialized) {
            Py_Finalize();
            python_initialized = false;
        }
    }
    
    bool init() {
        try {
            PyEval_RestoreThread(_save);
            ROS_INFO("Starting ALIKE detector initialization");
            
            // ??Python??
            PyRun_SimpleString(R"(
import sys
import os

detector_path = '/home/jetsonnx/deepen_ws/src/vins-fusion-opencv4/vins_estimator/src/alike_detector'
src_path = '/home/jetsonnx/deepen_ws/src/vins-fusion-opencv4/vins_estimator/src'
sys_path = sys.path

# ??????
if detector_path not in sys_path:
    sys.path.insert(0, detector_path)
if src_path not in sys_path:
    sys.path.insert(0, src_path)

print('Python path after update:', sys.path)
print('Current working directory:', os.getcwd())
)");
            
            // ??????
            PyRun_SimpleString(R"(
import os
print('PYTHONPATH:', os.environ.get('PYTHONPATH', ''))
try:
    import alike_detector
    print('alike_detector can be imported')
except Exception as e:
    print('Error importing alike_detector:', str(e))
)");
            
            // ??????
            importRequiredModules();
            
            // ???????
            createDetectorInstance();
            
            _save = PyEval_SaveThread();
            ROS_INFO("ALIKE detector initialized successfully");
            return true;
        } 
        catch (const std::exception& e) {
            _save = PyEval_SaveThread();
            ROS_ERROR("ALIKE initialization error: %s", e.what());
            if (PyErr_Occurred()) {
                PyObject *ptype, *pvalue, *ptraceback;
                PyErr_Fetch(&ptype, &pvalue, &ptraceback);
                if (pvalue != NULL) {
                    PyObject* str_exc_value = PyObject_Str(pvalue);
                    const char* err_msg = PyUnicode_AsUTF8(str_exc_value);
                    ROS_ERROR("Python error details: %s", err_msg);
                    Py_DECREF(str_exc_value);
                }
                Py_XDECREF(ptype);
                Py_XDECREF(pvalue);
                Py_XDECREF(ptraceback);
            }
            return false;
        }
    }

private:
    void importRequiredModules() {
        ROS_INFO("Importing required Python modules");
        
        // ??numpy
        ROS_INFO("Trying to import numpy...");
        PyObject* numpy = PyImport_ImportModule("numpy");
        if (!numpy) {
            PyErr_Print();
            throw std::runtime_error("Cannot import numpy");
        }
        Py_DECREF(numpy);
        ROS_INFO("Successfully imported numpy");

        // ??alike_detector????
        PyRun_SimpleString(R"(
import sys
from pathlib import Path
detector_dir = Path('/home/jetsonnx/deepen_ws/src/vins-fusion-opencv4/vins_estimator/src/alike_detector')
if str(detector_dir) not in sys.path:
    sys.path.insert(0, str(detector_dir))
)");

        // ????alike_wrapper
        ROS_INFO("Trying to import alike_wrapper...");
        PyObject* module = PyImport_ImportModule("alike_wrapper");
        if (!module) {
            PyErr_Print();
            PyObject *ptype, *pvalue, *ptraceback;
            PyErr_Fetch(&ptype, &pvalue, &ptraceback);
            if (pvalue != NULL) {
                PyObject* str_exc_value = PyObject_Str(pvalue);
                const char* err_msg = PyUnicode_AsUTF8(str_exc_value);
                ROS_ERROR("Error importing alike_wrapper: %s", err_msg);
                Py_DECREF(str_exc_value);
            }
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            throw std::runtime_error("Cannot import alike_wrapper");
        }
        
        ROS_INFO("All required modules imported successfully");
        Py_DECREF(module);
    }

    void createDetectorInstance() {
        ROS_INFO("Creating ALIKE detector instance");
        PyObject* module = PyImport_ImportModule("alike_wrapper");
        if (!module) {
            throw std::runtime_error("Module not found when creating detector");
        }
        
        PyObject* detector_class = PyObject_GetAttrString(module, "PyALikeDetector");
        if (!detector_class) {
            Py_DECREF(module);
            throw std::runtime_error("Cannot find PyALikeDetector class");
        }

        alike_detector = PyObject_CallObject(detector_class, NULL);
        if (!alike_detector) {
            Py_DECREF(detector_class);
            Py_DECREF(module);
            PyErr_Print();
            throw std::runtime_error("Cannot create PyALikeDetector instance");
        }
        
        Py_DECREF(detector_class);
        Py_DECREF(module);
        ROS_INFO("Detector instance created successfully");
    }
};

// ????????...
